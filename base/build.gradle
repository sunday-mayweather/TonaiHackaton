apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../sharedconfigs-include.gradle'
apply plugin: 'com.google.firebase.appdistribution'

android {
    def versionNumber = loadVersionCode()

    defaultConfig {
        applicationId "app.simulacra"
        versionCode versionNumber // Incremented by CI
        if (project.hasProperty("leakCanaryDisabled"))
            buildConfigField "boolean", "DISABLE_LEAKCANARY", "true"
        else
            buildConfigField "boolean", "DISABLE_LEAKCANARY", "false"
    }

    signingConfigs {
        release {
            Properties rProps = loadSigningProperties('release_signing.properties')
            storeFile = file(projectDir.canonicalPath + rProps['STORE_FILE'])
            storePassword = rProps['STORE_PASSWORD']
            keyAlias = rProps['KEY_ALIAS']
            keyPassword = rProps['KEY_PASSWORD']
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            signingConfig signingConfigs.release
            crunchPngs false
            debuggable true
        }
        beta {
            multiDexEnabled true
            debuggable true
            shrinkResources true
            minifyEnabled true
            crunchPngs true
            signingConfig signingConfigs.release
            ext.enableCrashlytics = true
            ext.betaDistributionReleaseNotes = getReleaseNotes()
            ext.betaDistributionEmailsFilePath = rootProject.extensions.getByName("ext")["testersMails"]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-rules-beta.pro'
        }
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            debuggable false
            crunchPngs true
            signingConfig signingConfigs.release
            // Endpoint based on build type
            ext.betaDistributionReleaseNotes = getReleaseNotes()
            ext.betaDistributionEmailsFilePath = rootProject.extensions.getByName("ext")["testersMails"]
            matchingFallbacks = ['release']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        // Multiple libs contain this file -> cause build error
        exclude 'LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    lintOptions {
        disable 'InvalidPackage' // Dagger
        disable 'GoogleAppIndexingWarning'
        disable 'RestrictedApi'
        abortOnError true
        checkDependencies true
    }

    kapt {
        // Avoid kapt mechanism that replaces every unknown type with NonExistentClass (for better dagger errors)
        correctErrorTypes = true
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 500)
        }
    }
}

dependencies {
    // Analytics
    implementation project(":analytics")

    // Network
    implementation project(":network-core")

    // Domain
    implementation project(":domain-core")
    implementation project(":domain-user")
    implementation project(":domain-discover")

    // Data
    implementation project(":data-user")
    implementation project(":data-discover")
    implementation project(":data-stream")

    // Features
    implementation project(":feature-common")
    implementation project(":feature-policies")
    implementation project(":feature-onboarding")
    implementation project(":feature-discover")
    implementation project(":feature-profile")
    implementation project(':feature-active-quest')

    implementation kotlinDependencies.kotlinStdLib

    implementation androidXDependencies.appCompat
    implementation androidXDependencies.constraintLayout
    implementation androidXDependencies.design
    implementation androidXDependencies.lifecycle
    implementation androidXDependencies.lifecycleExtensions
    implementation androidXDependencies.navigationFragment
    implementation androidXDependencies.navigationUi
    implementation androidXDependencies.androidKtx
    implementation androidXDependencies.playCore

    implementation arDependencies.sceneView

    implementation diDependencies.dagger
    kapt diDependencies.daggerCompiler
    implementation diDependencies.daggerAndroid
    implementation diDependencies.daggerAndroidSupport
    kapt diDependencies.daggerAndroidProcessor

    debugImplementation developmentDependencies.leakCanary
    debugImplementation developmentDependencies.chucker
    betaImplementation developmentDependencies.chucker
    releaseImplementation developmentDependencies.chuckerNoOp
    implementation developmentDependencies.timber

    implementation dataDependencies.moshi
    implementation dataDependencies.okHttp
    implementation dataDependencies.okHttpInterceptor
    implementation dataDependencies.retrofit
    implementation dataDependencies.retrofitMoshiConverter

    implementation dataDependencies.room

    implementation analyticsDependencies.amplitude


    testImplementation project(":tests-common")
    testImplementation project(":tests-android-common")
}


Properties loadSigningProperties(String propertyFileName) {
    Properties rProps = new Properties()
    def rpFile = file(propertyFileName)
    if (rpFile.canRead()) {
        rProps.load(new FileInputStream(rpFile))

        if (rProps != null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
            return rProps
        } else {
            throw new Exception(propertyFileName + " found but some entries are missing")
        }
    } else {
        throw new FileNotFoundException(propertyFileName + " not found")
    }
}

Integer loadVersionCode() {
    // Build number with default value
    def buildNumber = 1000 // Avoid being updated from google play code should be larger

    task(runProgram) {
        if (project.hasProperty("ciVersion")) {
            if (ciVersion != null) {
                buildNumber = Integer.parseInt(ciVersion)
            }
        }

        if (project.hasProperty("type")) {
            saveReleaseNotes("Version: ${rootProject.extensions.getByName("ext")["versionName"]} - " + "${type} - " + "Build number: ${buildNumber}")
        }
    }

    return buildNumber
}

android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        //BuildType - one of BetaStage, BetaProd, ReleaseStage or ReleaseProd
        def buildType = "BetaStage"

        if (project.hasProperty("type")) {
            buildType = type
        }
        outputFileName = variant.name + "-v." + variant.versionName + "-" + "${variant.versionCode}" + "-" + "${buildType}" + ".apk"
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.isMinifyEnabled()) {
        variant.assembleProvider.get().doLast {
            copy {
                from variant.mappingFile
                into "${rootDir}/base/mappings"
                rename { String filename -> "mapping-${variant.versionName}.txt" }
            }
        }
    }
}

def saveReleaseNotes(String releaseNotes) {
    Properties properties = new Properties()
    def propFile = file("release_notes.properties")
    properties.load(new FileInputStream(propFile))
    properties.setProperty('RELEASE_NOTES', releaseNotes)
    properties.store(propFile.newWriter(), null)
}

String getReleaseNotes() {
    Properties properties = new Properties()
    def propFile = file("release_notes.properties")
    if (propFile.canRead()) {
        properties.load(new FileInputStream(propFile))

        if (properties != null && properties.containsKey('RELEASE_NOTES')) {
            return properties['RELEASE_NOTES']
        } else {
            throw new Exception("release_notes.properties found but some entries are missing")
        }
    } else {
        throw new FileNotFoundException("release_notes.properties not found")
    }
}

apply plugin: 'com.google.gms.google-services'